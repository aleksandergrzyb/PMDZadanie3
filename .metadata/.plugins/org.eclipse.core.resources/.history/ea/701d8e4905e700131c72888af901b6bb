package pl.put.idss.dw.hadoop.tasks;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.reduce.IntSumReducer;
import org.apache.hadoop.util.GenericOptionsParser;

public class MMMultTask {

	public static class MMMultTaskMapper extends Mapper<Object, Text, Text, Text> 
	{
		private Text word = new Text();
		private Text valueText = new Text();
		
		protected static String getInputFileName(Context context) 
		{
			FileSplit fs = (FileSplit) context.getInputSplit();
			return fs.getPath().getName();
		}

		public void map(Object key, Text value, Context context) throws IOException, InterruptedException 
		{
			String line = value.toString();
			String[] parts = line.trim().split("\\s+");
			String matrixName = getInputFileName(context);
			if (matrixName.equals("A.txt")) {
				word.set(parts[1]);
				String valueString = "M " + parts[0] + " "  + parts[2];
				valueText.set(valueString);
				context.write(word, valueText);
			}
			else if (matrixName.equals("B.txt")) {
				word.set(parts[0]);
				String valueString = "N " + parts[1] + " " + parts[2];
				valueText.set(valueString);
				context.write(word, valueText);
			}
		}
	}

	public static class MMMultTaskReducer extends Reducer<Text, Text, Text, Text> 
	{
		private List<String> MList = new ArrayList<String>();
		private List<String> NList = new ArrayList<String>();
		
		private Text keyText = new Text();
		private Text valueText = new Text();
		
		public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException 
		{
			while (values.iterator().hasNext()) {
				String currentLine = values.iterator().next().toString();
				System.out.println("\nREDUCER: " + currentLine + "\n");
				String[] parts = currentLine.trim().split("\\s+");
				if (parts[0].equals("M")) {
					MList.add(parts[1] + " " + parts[2]);
				}
				else if (parts[0].equals("N")) {
					NList.add(parts[1] + " " + parts[2]);
				}
			}
			
			for (String mLine : MList) {
				String[] mParts = mLine.trim().split("\\s+");
				System.out.println("\nPIERWSZA MACIERZ: " + Arrays.toString(mParts) + "\n");
				int mValue = Integer.parseInt(mParts[1]);
				for (String nLine : NList) {
					String[] nParts = nLine.trim().split("\\s+");
					System.out.println("\nDRUGA MACIERZ: " + Arrays.toString(nParts) + "\n");
					int nValue = Integer.parseInt(nParts[1]);
					int result = mValue * nValue;
					keyText.set(mParts[0] + " " + nParts[0]);
					valueText.set(Integer.toString(result));
					System.out.println("\nKEY TEXT: " + mParts[0] + " " + nParts[0] + "\n");
					System.out.println("\nKEY TEXT: " + Integer.toString(result) + "\n");
					context.write(keyText, valueText);
				}
			}
			
			MList.clear();
			NList.clear();
		}
	}

	public static class MMMultTask2Mapper extends Mapper<Object, Text, Text, IntWritable> 
	{
		private Text keyText = new Text();
		
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException 
		{
			String currentLine = value.toString();
			String[] parts = currentLine.trim().split("\\s+");
			keyText.set(parts[0] + " " + parts[1]);
			context.write(keyText, new IntWritable(Integer.parseInt(parts[2])));
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		String[] otherArgs = new GenericOptionsParser(conf, args)
				.getRemainingArgs();
		if (otherArgs.length != 2) {
			System.err.println("Usage: mm-mult <input_dir> <output_dir>");
			System.exit(2);
		}

		Job job = new Job(conf, "matrix-vector-mult");
		job.setJarByClass(MMMultTask.class);

		job.setMapperClass(MMMultTaskMapper.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);

		job.setReducerClass(MMMultTaskReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		FileInputFormat.addInputPath(job, new Path(otherArgs[0] + "/A.txt"));
		FileInputFormat.addInputPath(job, new Path(otherArgs[0] + "/B.txt"));
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[1] + "_tmp"));

		if (job.waitForCompletion(true)) {
			Job job2 = new Job(conf, "matrix-vector-mult2");
			job2.setJarByClass(MMMultTask.class);

			job2.setMapperClass(MMMultTask2Mapper.class);
			job2.setMapOutputKeyClass(Text.class);
			job2.setMapOutputValueClass(IntWritable.class);

			job2.setReducerClass(IntSumReducer.class);
			job2.setOutputKeyClass(Text.class);
			job2.setOutputValueClass(IntWritable.class);

			FileInputFormat.addInputPath(job2, new Path(otherArgs[1] + "_tmp"));
			FileOutputFormat.setOutputPath(job2, new Path(otherArgs[1]));
			job2.waitForCompletion(true);
		}
		System.exit(1);
	}
}
